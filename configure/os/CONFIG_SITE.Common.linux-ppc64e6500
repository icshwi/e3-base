# -*- mode: makefile; -*-
include $(CONFIG)/os/CONFIG.Common.linux-ppc64

TOOLCHAIN_VER=$(CC_IFC14XX_TOOLCHAIN_VER)
TOOLCHAIN_PATH=$(CC_IFC14XX_TOOLCHAIN_PATH)
TOOLCHAIN=fsl

COMMANDLINE_LIBRARY = READLINE

# If your crosscompiler name has a GNU target prefix like <gnutarget>-gcc,
# e.g. powerpc64-fsl-linux-gcc, put a GNU_TARGET definition in
# EPICS Variable GNU_TARGET
# is the same as TARGET_PREFIX in environment-setup-ppc64e6500-fsl-linux
# except the suffix "-"
#
GNU_TARGET=powerpc64-$(TOOLCHAIN)-linux

SYSROOTS=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_VER)/sysroots

# Local SDKTARGETSYSROOT is defined in environment-setup-ppc64e6500-fsl-linux
#
SDKTARGETSYSROOT=$(SYSROOTS)/ppc64e6500-$(TOOLCHAIN)-linux

CROSS_INCLUDES =	

#
# Check export CC="" after *-gcc, the all flags should be TOOLCHAIN_CFLAG, which can be used
# in ARCH_DEP_CPPFLAGS, ARCH_DEP_CFLAGS, ARCH_DEP_CXXFLAGS, ARCH_DEP_LDFLAGS

TOOLCHAIN_CFLAG = --sysroot=$(SDKTARGETSYSROOT) -mhard-float -mcpu=e6500


ARCH_DEP_CPPFLAGS += $(TOOLCHAIN_CFLAG)
ARCH_DEP_CFLAGS   += $(TOOLCHAIN_CFLAG)
ARCH_DEP_CXXFLAGS += $(TOOLCHAIN_CFLAG)
ARCH_DEP_LDFLAGS  += --sysroot=$(SDKTARGETSYSROOT) 


ARCH_DEP_CFLAGS   += -pipe -feliminate-unused-debug-types
ARCH_DEP_CXXFLAGS += -pipe -feliminate-unused-debug-types
ARCH_DEP_LDFLAGS  += -Wl,-O1
ARCH_DEP_LDFLAGS  += -Wl,--hash-style=gnu
ARCH_DEP_LDFLAGS  += -Wl,--as-needed


# OK to compile with gcc
# powerpc64-poky-linux-g++ (GCC) 6.2.0
#ARCH_DEP_CXXFLAGS += -std=gnu++98
#ARCH_DEP_CXXFLAGS += -std=gnu++03
#ARCH_DEP_CXXFLAGS += -std=gnu++11
#ARCH_DEP_CXXFLAGS += -std=gnu++14

#
#../epicsExceptionTest.cpp: In function ‘void epicsExceptionTestPrivate()’:
#../epicsExceptionTest.cpp:61:49: error: size of array is too large
#         char * p = new char [unsuccessfulNewSize];
#                                                 ^
#../epicsExceptionTest.cpp:74:38: error: size of array is too large
#             char [unsuccessfulNewSize];


OECORE_NATIVE=x86_64-$(TOOLCHAIN)sdk-linux

# GNU_TARGET and GNU_DIR reu
# EPICS GNU_DIR is the same as
#
GNU_DIR=$(SYSROOTS)/$(OECORE_NATIVE)/usr

# GNU_BIN is defined in CONFIG.gnuCommon as follows:
# GNU_BIN = $(GNU_DIR)/bin
# However, toolchain has the GNU_TARGET after bin
GNU_BIN=$(GNU_DIR)/bin/$(GNU_TARGET)

# GNU_GARGET_LIB_DIR is defined in CONFIG.CrossCommon as follows:
# GNU_TARGET_LIB_DIR = $(GNU_TARGET:%= $(GNU_DIR)/%/lib)
# However, the toolchain han no GNU_TARGET after lib
#
GNU_TARGET_LIB_DIR=$(GNU_DIR)/lib



PYTHONHOME=$(SDKTARGETSYSROOT)/usr

