# -*- mode: Makefile;-*-
.DEFAULT_GOAL := help

.PHONY: help default  distclean clean uninstall $(E3_BASE_INSTALL_LOCATION)



# help is defined in 
# https://gist.github.com/rcmachado/af3db315e31383502660
help:
	$(info --------------------------------------- )	
	$(info Available targets)
	$(info --------------------------------------- )
	$(QUIET) awk '/^[a-zA-Z\-\_0-9]+:/ {            \
	  nb = sub( /^## /, "", helpMsg );              \
	  if(nb == 0) {                                 \
	    helpMsg = $$0;                              \
	    nb = sub( /^[^:]*:.* ## /, "", helpMsg );   \
	  }                                             \
	  if (nb)                                       \
	    print  $$1 "\t" helpMsg;                    \
	}                                               \
	{ helpMsg = $$0 }'                              \
	$(MAKEFILE_LIST) | column -ts:	


default: help


## Distclean (Remove bin and lib) the EPICS in  $(E3_BASE_SRC_PATH)
distclean:
	$(QUIET) cd $(E3_BASE_SRC_PATH) && $(SUDO) make distclean



## Clean the EPICS in  $(E3_BASE_SRC_PATH)
clean:
	$(QUIET) cd $(E3_BASE_SRC_PATH) && $(SUDO) make clean	


## Uninstall the installed EPICS BASE according to  $(E3_BASE_INSTALL_LOCATION)
uninstall: $(E3_BASE_INSTALL_LOCATION)


$(E3_BASE_INSTALL_LOCATION):
	$(QUIET) $(SUDO) rm -rf $@


.PHONY: conf copystartup  $(E3_BASE_VERSION) build rebuild patch patchrevert


rebuild: distclean init build


## Build EPICS BASE(s) according to $(E3_BASE_VERSION)
build: conf
	$(QUIET) $(SUDO) $(MAKE) -C $(E3_BASE_SRC_PATH)

# consistent with all other modules, do nothing
install:

conf: $(E3_BASE_VERSION) copystartup 


$(E3_BASE_VERSION):
	$(QUIET) $(site_base)
ifneq (,$(findstring linux-ppc64e6500,$(E3_CROSS_COMPILER_TARGET_ARCHS)))
	$(QUIET) install -m 644 $(TOP)/configure/os/CONFIG_SITE.Common.linux-ppc64e6500  $(EPICS_BASE)/configure/os/
endif
ifneq (,$(findstring linux-cortexa9hf-neon,$(E3_CROSS_COMPILER_TARGET_ARCHS)))
	$(QUIET) install -m 644 $(TOP)/configure/os/CONFIG_SITE.Common.linux-cortexa9hf-neon  $(EPICS_BASE)/configure/os/
endif



copystartup:
#ifeq (,$(findstring tags/R7,$(EPICS_BASE_TAG)))
	$(QUIET) $(SUDO) install -m 755 -d $(E3_BASE_INSTALL_LOCATION_STARTUP)
	$(QUIET) $(SUDO) install -m 755    $(EPICS_BASE)/startup/EpicsHostArch.pl $(E3_BASE_INSTALL_LOCATION_STARTUP)
#endif


## Apply EPICS Patch Files 
patch:
	$(QUIET) $(call patch_base,$(E3_BASE_VERSION))
	$(QUIET) $(call patch_site,$(E3_BASE_VERSION))

## Revert EPICS Patch Files 
patchrevert:
	$(QUIET) $(call patch_revert_base,$(E3_BASE_VERSION))
	$(QUIET) $(call patch_revert_site,$(E3_BASE_VERSION))


.PHONY: pkgs $(PKG_AUTOMATION_NAME) init git-submodule-sync $(E3_BASE_SRC_PATH)  checkout



## Install Required Packages for E3
pkgs: $(PKG_AUTOMATION_NAME)
	$(QUIET) bash $</pkg_automation.bash


## Initialize : $(E3_BASE_SRC_PATH) 
init: git-submodule-sync  $(E3_BASE_SRC_PATH)  $(PKG_AUTOMATION_NAME) checkout


git-submodule-sync:
	$(QUIET) git submodule sync


$(PKG_AUTOMATION_NAME):
	$(QUIET) $(git_update)

$(E3_BASE_SRC_PATH): 
	$(QUIET) $(git_base_update)


# EPICS 7 needs the following command, and EPICS 3 has no side-effect by them,
# so we uses in both cases git submodule update --init --reference ./
checkout: 
	cd $(E3_BASE_SRC_PATH) && git checkout $(EPICS_BASE_TAG) && git submodule update --init --reference ./

#ifneq (,$(findstring tags/R7,$(EPICS_BASE_TAG)))
#	cd $(E3_BASE_SRC_PATH) && git submodule update --init --reference ./
#endif

